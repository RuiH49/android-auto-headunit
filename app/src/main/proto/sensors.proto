syntax = "proto2";

package info.anodsplace.headunit.aap.protocol;
option java_outer_classname = "Sensors";

import "common.proto";

enum SensorsMsgType {
    MSG_SENSORS_STARTREQUEST = 0x8001;
    MSG_SENSORS_STARTRESPONSE = 0x8002;
    MSG_SENSORS_EVENT = 0x8003;
}

enum SensorType
{
    SENSOR_TYPE_LOCATION = 1;
    SENSOR_TYPE_COMPASS = 2;
    SENSOR_TYPE_CAR_SPEED = 3;
    SENSOR_TYPE_RPM = 4;
    SENSOR_TYPE_ODOMETER = 5;
    SENSOR_TYPE_FUEL_LEVEL = 6;
    SENSOR_TYPE_PARKING_BRAKE = 7;
    SENSOR_TYPE_GEAR = 8;
    SENSOR_TYPE_DIAGNOSTICS = 9;
    SENSOR_TYPE_NIGHT = 10;
    SENSOR_TYPE_ENVIRONMENT = 11;
    SENSOR_TYPE_HVAC = 12;
    SENSOR_TYPE_DRIVING_STATUS = 13;
    SENSOR_TYPE_DEAD_RECONING = 14;
    SENSOR_TYPE_PASSENGER = 15;
    SENSOR_TYPE_DOOR = 16;
    SENSOR_TYPE_LIGHT = 17;
    SENSOR_TYPE_TIRE = 18;
    SENSOR_TYPE_ACCEL = 19;
    SENSOR_TYPE_GYRO = 20;
    SENSOR_TYPE_GPS = 21;
}

message SensorBatch
{
    message LocationData
    {
        optional uint64 timestamp = 1;
        optional int32 latitude = 2;
        optional int32 longitude = 3;
        optional uint32 accuracy = 4;
        optional int32 altitude = 5;
        optional int32 speed = 6;
        optional int32 bearing = 7;
    }
    message RpmData
    {
        required int32 rpm = 1;
    }
    message FuelData
    {
        required int32 fuellevel = 1;
        optional int32 range = 2;
        optional bool lowfuel = 3;
    }
    message DeadReckoningData
    {
        optional int32 steering_angel = 1;
        optional int32 wheel_speed = 2;
    }
    message NightData
    {
        required bool is_night_mode = 1;
    }
    message ParkingBrakeData
    {
        required bool is_engaged = 1;
    }
    message DrivingStatusData
    {
        enum Status
        {
            DRIVING_STATUS_UNRESTRICTED = 0; // 0x0
            DRIVING_STATUS_NO_VIDEO = 1; // 0x1
            DRIVING_STATUS_NO_KEYBOARD_INPUT = 2; // 0x2
            DRIVE_STATUS_NO_VOICE_INPUT = 4; // 0x4
            DRIVING_STATUS_NO_CONFIG = 8; // 0x8
            DRIVING_STATUS_LIMIT_MESSAGE_LEN = 16; // 0x10
            DRIVING_STATUS_FULLY_RESTRICTED = 31; // 0x1f
        }
        required int32 status = 1;
    }
    message GpsSatelliteData
    {
        message GpsSatellite
        {
            optional int32 prn = 1;
            optional int32 snr_e3 = 2;
            optional bool used_in_fix = 3;
            optional int32 azimuth_e3 = 4;
            optional int32 elevation_e3 = 5;
        }
        optional int32 number_in_use = 1;
        optional int32 number_in_view = 2;
        repeated GpsSatellite satellites = 3;
    }
    message GearData
    {
        enum GEAR
        {
            GEAR_DRIVE = 100; // 0x64
            GEAR_EIGHTH = 8; // 0x8
            GEAR_FIFTH = 5; // 0x5
            GEAR_FIRST = 1; // 0x1
            GEAR_FOURTH = 4; // 0x4
            GEAR_NEUTRAL = 0; // 0x0
            GEAR_NINTH = 9; // 0x9
            GEAR_PARK = 101; // 0x65
            GEAR_REVERSE = 102; // 0x66
            GEAR_SECOND = 2; // 0x2
            GEAR_SEVENTH = 7; // 0x7
            GEAR_SIXTH = 6; // 0x6
            GEAR_TENTH = 10; // 0xa
            GEAR_THIRD = 3; // 0x3
        }
        required GEAR gear = 1;
    }
    message CompassData
    {
        optional int32 bearing_e6 =1;
        optional int32 pitch_e6 =2;
        optional int32 roll_e6 =3;
    }
    message SpeedData
    {
        optional int32 speed_e6 =1;
        optional bool cruise_engaged=2;
        optional bool cruise_set_speed=3;
    }
    message OdometerData
    {
        optional int32 kms_el = 1;
        optional int32 trip_kms_el = 2;
    }
    message DiagnosticsData
    {
        optional bytes diagnostics_byte = 1;
    }
    message EnvironmentData
    {
        optional int32 temperature_e3 =1;
        optional int32 pressure_e3 = 2;
        optional int32 rain = 3;
    }
    message HvacData
    {
        optional int32 target_temperature_e3 = 1;
        optional int32 current_temperature_e3 = 2;
    }
    message AccelerometerData
    {
        optional int32 acceleration_x_e3 = 1;
        optional int32 acceleration_y_e3 = 2;
        optional int32 acceleration_z_e3 = 3;
    }
    message GyroscopeData
    {
        optional int32 rotation_speed_x_e3 = 1;
        optional int32 rotation_speed_y_e3 = 2;
        optional int32 rotation_speed_z_e3 = 3;
    }
    message DoorData
    {
        optional bool hood_open=1;
        optional bool boot_open=2;
        repeated bool door_open=3;
    }
    message LightData
    {
        enum HEADLIGHT_STATE
        {
            HEADLIGHT_STATE_0 = 0;
            HEADLIGHT_STATE_1 = 1;
            HEADLIGHT_STATE_2 = 2;
            HEADLIGHT_STATE_3 = 3;
        }
        enum TURN_INDICATOR_STATE
        {
            TURN_INDICATOR_STATE_0 = 0;
            TURN_INDICATOR_STATE_1 = 1;
            TURN_INDICATOR_STATE_2 = 2;
            TURN_INDICATOR_STATE_3 = 3;
        }
        optional HEADLIGHT_STATE headlight = 1;
        optional TURN_INDICATOR_STATE turn_indicator = 2;
        optional bool hazard_light_on = 3;
    }
    message PassengerData
    {
        optional bool passenger_present =1;
    }
    repeated LocationData location_data = 1; // Working
    repeated CompassData compass_data = 2; // Sensor not yet supported
    repeated SpeedData speed_data = 3; // Working - Aka data is received, but has no effect
    repeated RpmData rpm = 4; //Sensor not yet supported
    repeated OdometerData odometer_data = 5; //Sensor not yet supported
    repeated FuelData fuel_data = 6; //Sensor not yet supported
    repeated ParkingBrakeData parkingbrake_data = 7; // Working
    repeated GearData gear_data = 8; //Working but need to do the enum definition, and has no effect
    repeated DiagnosticsData diagnostics_data = 9; //Sensor not yet supported
    repeated NightData night_mode = 10; // Working
    repeated EnvironmentData enviorment_data = 11; //Sensor not yet supported
    repeated HvacData hvac_data = 12; //Sensor not yet supported
    repeated DrivingStatusData driving_status = 13; //Working
    repeated DeadReckoningData dead_reckoning = 14; //Sensor not yet supported
    repeated PassengerData passenger_data = 15; //Sensor not yet supported
    repeated DoorData door_data= 16; //Sensor not yet supported
    repeated LightData light_data= 17;  //Sensor not yet supported
    //repeated TirePressureData Tire = 18;
    repeated AccelerometerData accel_data = 19; //Sensor not yet supported
    repeated GyroscopeData gyro_data = 20; //Sensor not yet supported
    repeated GpsSatelliteData gps_satellite_data = 21;
}

message SensorRequest
{
    optional SensorType type = 1;
    optional int64 min_update_period = 2;
}

message SensorResponse
{
    required MessageStatus status = 1;
}