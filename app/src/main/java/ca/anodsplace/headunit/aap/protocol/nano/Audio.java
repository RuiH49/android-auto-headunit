// Generated by the protocol buffer compiler.  DO NOT EDIT!

package ca.anodsplace.headunit.aap.protocol.nano;

@SuppressWarnings("hiding")
public interface Audio {

  // enum AudioStreamType
  public static final int CAR_STREAM_SYSTEM = 1;
  public static final int CAR_STREAM_VOICE = 2;
  public static final int CAR_STREAM_MEDIA = 3;

  public static final class AudioConfiguration extends
      com.google.protobuf.nano.MessageNano {

    private static volatile AudioConfiguration[] _emptyArray;
    public static AudioConfiguration[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new AudioConfiguration[0];
          }
        }
      }
      return _emptyArray;
    }

    // required uint32 sample_rate = 1;
    public int sampleRate;

    // required uint32 number_of_bits = 2;
    public int numberOfBits;

    // required uint32 number_of_channels = 3;
    public int numberOfChannels;

    public AudioConfiguration() {
      clear();
    }

    public AudioConfiguration clear() {
      sampleRate = 0;
      numberOfBits = 0;
      numberOfChannels = 0;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      output.writeUInt32(1, this.sampleRate);
      output.writeUInt32(2, this.numberOfBits);
      output.writeUInt32(3, this.numberOfChannels);
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeUInt32Size(1, this.sampleRate);
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeUInt32Size(2, this.numberOfBits);
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeUInt32Size(3, this.numberOfChannels);
      return size;
    }

    @Override
    public AudioConfiguration mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.sampleRate = input.readUInt32();
            break;
          }
          case 16: {
            this.numberOfBits = input.readUInt32();
            break;
          }
          case 24: {
            this.numberOfChannels = input.readUInt32();
            break;
          }
        }
      }
    }

    public static AudioConfiguration parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new AudioConfiguration(), data);
    }

    public static AudioConfiguration parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new AudioConfiguration().mergeFrom(input);
    }
  }

  public static final class AudioFocusRequestNotification extends
      com.google.protobuf.nano.MessageNano {

    // enum AudioFocusRequestType
    public static final int AUDIOFOCUS_GAIN = 1;
    public static final int AUDIOFOCUS_GAIN_TRANSIENT = 2;
    public static final int AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK = 3;
    public static final int AUDIOFOCUS_RELEASE = 4;
    public static final int AUDIOFOCUS_NONE = 0;

    private static volatile AudioFocusRequestNotification[] _emptyArray;
    public static AudioFocusRequestNotification[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new AudioFocusRequestNotification[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional .ca.yyx.hu.aap.protocol.AudioFocusRequestNotification.AudioFocusRequestType request = 1;
    public int request;

    public AudioFocusRequestNotification() {
      clear();
    }

    public AudioFocusRequestNotification clear() {
      request = ca.anodsplace.headunit.aap.protocol.nano.Audio.AudioFocusRequestNotification.AUDIOFOCUS_GAIN;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.request != ca.anodsplace.headunit.aap.protocol.nano.Audio.AudioFocusRequestNotification.AUDIOFOCUS_GAIN) {
        output.writeInt32(1, this.request);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.request != ca.anodsplace.headunit.aap.protocol.nano.Audio.AudioFocusRequestNotification.AUDIOFOCUS_GAIN) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(1, this.request);
      }
      return size;
    }

    @Override
    public AudioFocusRequestNotification mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            int value = input.readInt32();
            switch (value) {
              case ca.anodsplace.headunit.aap.protocol.nano.Audio.AudioFocusRequestNotification.AUDIOFOCUS_GAIN:
              case ca.anodsplace.headunit.aap.protocol.nano.Audio.AudioFocusRequestNotification.AUDIOFOCUS_GAIN_TRANSIENT:
              case ca.anodsplace.headunit.aap.protocol.nano.Audio.AudioFocusRequestNotification.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK:
              case ca.anodsplace.headunit.aap.protocol.nano.Audio.AudioFocusRequestNotification.AUDIOFOCUS_RELEASE:
              case ca.anodsplace.headunit.aap.protocol.nano.Audio.AudioFocusRequestNotification.AUDIOFOCUS_NONE:
                this.request = value;
                break;
            }
            break;
          }
        }
      }
    }

    public static AudioFocusRequestNotification parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new AudioFocusRequestNotification(), data);
    }

    public static AudioFocusRequestNotification parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new AudioFocusRequestNotification().mergeFrom(input);
    }
  }

  public static final class AudioFocusNotification extends
      com.google.protobuf.nano.MessageNano {

    // enum AudioFocusStateType
    public static final int AUDIOFOCUS_STATE_GAIN = 1;
    public static final int AUDIOFOCUS_STATE_GAIN_TRANSIENT = 2;
    public static final int AUDIOFOCUS_STATE_LOSS = 3;
    public static final int AUDIOFOCUS_STATE_LOSS_TRANSIENT_CAN_DUCK = 4;
    public static final int AUDIOFOCUS_STATE_LOSS_TRANSIENT = 5;
    public static final int AUDIOFOCUS_STATE_GAIN_MEDIA_ONLY = 6;
    public static final int AUDIOFOCUS_STATE_GAIN_TRANSIENT_GUIDANCE_ONLY = 7;

    private static volatile AudioFocusNotification[] _emptyArray;
    public static AudioFocusNotification[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new AudioFocusNotification[0];
          }
        }
      }
      return _emptyArray;
    }

    // required .ca.yyx.hu.aap.protocol.AudioFocusNotification.AudioFocusStateType focus_state = 1;
    public int focusState;

    // optional bool unsolicited = 2;
    public boolean unsolicited;

    public AudioFocusNotification() {
      clear();
    }

    public AudioFocusNotification clear() {
      focusState = ca.anodsplace.headunit.aap.protocol.nano.Audio.AudioFocusNotification.AUDIOFOCUS_STATE_GAIN;
      unsolicited = false;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      output.writeInt32(1, this.focusState);
      if (this.unsolicited != false) {
        output.writeBool(2, this.unsolicited);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
        .computeInt32Size(1, this.focusState);
      if (this.unsolicited != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(2, this.unsolicited);
      }
      return size;
    }

    @Override
    public AudioFocusNotification mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            int value = input.readInt32();
            switch (value) {
              case ca.anodsplace.headunit.aap.protocol.nano.Audio.AudioFocusNotification.AUDIOFOCUS_STATE_GAIN:
              case ca.anodsplace.headunit.aap.protocol.nano.Audio.AudioFocusNotification.AUDIOFOCUS_STATE_GAIN_TRANSIENT:
              case ca.anodsplace.headunit.aap.protocol.nano.Audio.AudioFocusNotification.AUDIOFOCUS_STATE_LOSS:
              case ca.anodsplace.headunit.aap.protocol.nano.Audio.AudioFocusNotification.AUDIOFOCUS_STATE_LOSS_TRANSIENT_CAN_DUCK:
              case ca.anodsplace.headunit.aap.protocol.nano.Audio.AudioFocusNotification.AUDIOFOCUS_STATE_LOSS_TRANSIENT:
              case ca.anodsplace.headunit.aap.protocol.nano.Audio.AudioFocusNotification.AUDIOFOCUS_STATE_GAIN_MEDIA_ONLY:
              case ca.anodsplace.headunit.aap.protocol.nano.Audio.AudioFocusNotification.AUDIOFOCUS_STATE_GAIN_TRANSIENT_GUIDANCE_ONLY:
                this.focusState = value;
                break;
            }
            break;
          }
          case 16: {
            this.unsolicited = input.readBool();
            break;
          }
        }
      }
    }

    public static AudioFocusNotification parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new AudioFocusNotification(), data);
    }

    public static AudioFocusNotification parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new AudioFocusNotification().mergeFrom(input);
    }
  }
}
