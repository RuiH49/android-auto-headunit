syntax = "proto2";

package ca.yyx.hu.aap.protocol;

enum MessageStatus
{
    STATUS_OK = 0;
}

message Key
{
    required uint32 keycode = 1;
    required bool down = 2;
    required uint32 metastate = 3;
    required bool longpress = 4;
}

message KeyEvent
{
    repeated Key keys = 1;
}

message TouchEvent
{
    enum PointerAction
    {
        TOUCH_ACTION_DOWN = 0;
        TOUCH_ACTION_UP = 1;
        TOUCH_ACTION_MOVE = 2;
        TOUCH_ACTION_CANCEL = 3;
        TOUCH_ACTION_OUTSIDE  = 4;
        TOUCH_ACTION_POINTER_DOWN  = 5;
        TOUCH_ACTION_POINTER_UP   = 6;
        // 0x6
    }

    message Pointer
    {
        optional uint32 x = 1;
        optional uint32 y = 2;
        optional uint32 pointer_id = 3;
    }
    repeated Pointer pointer_data = 1;
    optional uint32 action_index = 2;
    optional PointerAction action = 3;
}

message RelativeEvent_Rel
{
    required uint32 keycode = 1;
    required int32 delta = 2;
}

message RelativeEvent
{
    repeated RelativeEvent_Rel data = 1;
}

message AbsoluteEvent_Abs
{
    required uint32 keycode = 1;
    required int32 value = 2;
}

message AbsoluteEvent
{
    repeated AbsoluteEvent_Abs data = 1;
}

message InputReport
{
    required uint64 timestamp = 1;
    required int32 disp_channel_id = 2;
    optional TouchEvent touch_event = 3;
    optional KeyEvent key_event = 4;
    optional AbsoluteEvent absolute_event = 5;
    optional RelativeEvent relative_event = 6;
    optional TouchEvent touchpad_event = 7;
}

message KeyBindingRequest
{
    repeated int32 keycodes = 1;
}

message BindingResponse
{
    required MessageStatus status = 1;
}

enum SensorType
{
    SENSOR_TYPE_LOCATION = 1;
    SENSOR_TYPE_COMPASS = 2;
    SENSOR_TYPE_CAR_SPEED = 3;
    SENSOR_TYPE_RPM = 4;
    SENSOR_TYPE_ODOMETER = 5;
    SENSOR_TYPE_FUEL_LEVEL = 6;
    SENSOR_TYPE_PARKING_BRAKE = 7;
    SENSOR_TYPE_GEAR = 8;
    SENSOR_TYPE_NIGHT = 10;
    SENSOR_TYPE_ENVIRONMENT = 11;
    SENSOR_TYPE_DRIVING_STATUS = 13;
}

message SensorBatch
{
    message LocationData
    {
        optional uint64 timestamp = 1;
        optional int32 latitude = 2;
        optional int32 longitude = 3;
        optional uint32 accuracy = 4;
        optional int32 altitude = 5;
        optional int32 speed = 6;
        optional int32 bearing = 7;
    }
    message RPM
    {
        required int32 rpm = 1;
    }
    message FuelLevel
    {
        required int32 fuellevel = 1;
        optional int32 range = 2;
        optional bool lowfuel = 3;
    }
    message DeadReckoning
    {
        optional int32 steering_angel = 1;
        optional int32 wheel_speed = 2;
    }
    message NightModeData
    {
        required bool is_night = 1;
    }
    message ParkingBrakeData
    {
        required bool parking_brake = 1;
    }
    message DrivingStatusData
    {
        enum Status
        {
            DRIVING_STATUS_PARKED = 0;
            DRIVING_STATUS_MOOVING = 1;
        }
        required int32 status = 1;
    }
    message GpsSatelliteData
    {
        message GpsSatellite
        {
            optional int32 prn = 1;
            optional int32 snr_e3 = 2;
            optional bool used_in_fix = 3;
            optional int32 azimuth_e3 = 4;
            optional int32 elevation_e3 = 5;
        }
        optional int32 number_in_use = 1;
        optional int32 number_in_view = 2;
        repeated GpsSatellite satellites = 3;
    }

    repeated LocationData location_data = 1;
    //repeated CompassData compass_data = 2;
    //repeated SpeedData speed_data = 3;
    //repeated RpmData rpm_data = 4;
    //repeated OdometerData odometer_data = 5;
    //repeated FuelData fuel_data = 6;
    repeated ParkingBrakeData parking_break_data = 7;
    //repeated GearData gear_data = 8;
    //repeated DiagnosticsData diagnostics_data = 9;
    repeated NightModeData night_mode = 10;
    //repeated EnvironmentData environment_data = 11;
    //repeated HvacData hvac_data = 12;
    repeated DrivingStatusData driving_status = 13;
    //repeated DeadReckoningData dead_reckoning_data = 14;
    //repeated PassengerData passenger_data = 15;
    //repeated DoorData door_data = 16;
    //repeated LightData light_data = 17;
    //repeated TirePressureData tire_pressure_data = 18;
    //repeated AccelerometerData accelerometer_data = 19;
    //repeated GyroscopeData gyroscope_data = 20;
    repeated GpsSatelliteData gps_satellite_data = 21;
}

enum AudioStreamType
{
    CAR_STREAM_SYSTEM = 1;
    CAR_STREAM_VOICE = 2;
    CAR_STREAM_MEDIA = 3;
}

enum MediaCodecType
{
    MEDIA_CODEC_AUDIO = 1;
    MEDIA_CODEC_VIDEO = 3;
}

message AudioConfiguration
{
    required uint32 sample_rate = 1;
    required uint32 number_of_bits = 2;
    required uint32 number_of_channels = 3;
}

message Service
{
    optional uint32 id = 1;
    message SensorSourceService
    {
        message Sensor
        {
            required SensorType type = 1;
        }
        repeated Sensor sensors = 1;
    }
    optional SensorSourceService sensor_source_service = 2;

    message MediaSinkService
    {
        required MediaCodecType available_type = 1;
        required AudioStreamType audio_type = 2;
        repeated AudioConfiguration audio_configs = 3;

        message VideoConfiguration
        {
            enum VideoCodecResolutionType
            {
                VIDEO_RESOLUTION_800x480 = 1;
                VIDEO_RESOLUTION_1280x720 = 2;
                VIDEO_RESOLUTION_1920x1080 = 3;
            }

            enum VideoFrameRateType
            {
                VIDEO_FPS_30 = 1;
                VIDEO_FPS_60 = 2;
            }
            required VideoCodecResolutionType codec_resolution = 1;
            required VideoFrameRateType frame_rate = 2;
            required uint32 margin_width = 3;
            required uint32 margin_height = 4;
            required uint32 density = 5;
            optional uint32 decoder_additional_depth = 6;
        }
        repeated VideoConfiguration video_configs = 4;
        optional bool available_while_in_call = 5;
    }
    optional MediaSinkService media_sink_service = 3;

    message InputSourceService
    {
        message TouchConfig
        {
            required uint32 width = 1;
            required uint32 height = 2;
        }
        repeated uint32 keycodes_supported = 1;
        required TouchConfig touchscreen = 2;
        required TouchConfig touchpad = 3;
    }

    optional InputSourceService input_source_service = 4;

    message MediaSourceService
    {
        required MediaCodecType type = 1;
        required AudioConfiguration audio_config = 2;
        optional bool available_while_in_call = 3;
    }

    optional MediaSourceService media_source_service = 5;

    message BluetoothService {
        enum BluetoothPairingMethod
        {
            BLUETOOTH_PARING_METHOD_1 = 1;
            BLUETOOTH_PARING_METHOD_A2DP = 2;
            BLUETOOTH_PARING_METHOD_3 = 3;
            BLUETOOTH_PARING_METHOD_HFP = 4;
        }
        required string car_address = 1;
        repeated BluetoothPairingMethod supported_pairing_methods = 2;
    }
    optional BluetoothService bluetooth_service = 6;

    message NavigationStatusService {
        message ImageOptions
        {
            required int32 width = 1;
            required int32 height = 2;
            required int32 colour_deth_bits = 3;
        }

        required uint32 minimum_interval_ms = 1;
        required uint32 type = 2;
        optional ImageOptions image_options = 3;
    }
    optional NavigationStatusService navigation_status_service = 8;

    //radio_service = 7
    //media_playback_service == 9
    //phone_status_service = 10
    //media_browser_service=11
    //vendor_extension_service==12
    //generic_notification_service==13
}

message ServiceDiscoveryRequest
{
    optional string phone_name = 4;
}

message ServiceDiscoveryResponse
{
    repeated Service services = 1;
    optional string make = 2;
    optional string model = 3;
    optional string year = 4;
    optional string vehicle_id = 5;
    optional bool driver_position = 6;
    optional string head_unit_make = 7;
    optional string head_unit_model = 8;
    optional string head_unit_software_build = 9;
    optional string head_unit_software_version = 10;
    optional bool can_play_native_media_during_vr = 11;
    optional bool hide_projected_clock = 12;
}

message ChannelOpenRequest
{
    optional int32 priority = 1;
    optional int32 service_id = 2;
}

message ChannelOpenResponse
{
    required MessageStatus status = 1;
}

message PingRequest
{
    optional int64 timestamp = 1;
    optional int32 bug_report = 2;
}

message PingResponse
{
    required int64 timestamp = 1;
}

message ByeByeRequest
{
    enum ByeByeReason
    {
        REASON_QUIT = 1;
    }
    required ByeByeReason reason = 1;
}

message ByeByeResponse
{

}

message MediaSetupRequest
{
    optional uint32 type = 1; //Enum?
}

message Config
{
    enum ConfigStatus
    {
        CONFIG_STATUS_1 = 1;
        CONFIG_STATUS_2 = 2;
    }
    required ConfigStatus status = 1;
    required uint32 max_unacked = 2;
    repeated uint32 configuration_indices = 3;
}

message Start
{
    optional int32 session_id = 1;
    optional uint32 configuration_index = 2;
}

message Ack
{
    required int32 session_id = 1;
    required uint32 ack = 2;
}

message MicrophoneRequest
{
    required bool open = 1;
    optional bool anc_enabled = 2;
    optional bool ec_enabled = 3;
    optional int32 max_unacked = 4;
}

message MicrophoneResponse
{
    required int32 status = 1;
    required uint32 session_id = 2;
}

enum VideoFocusMode
{
    VIDEO_FOCUS_MODE_1 = 1;
    VIDEO_FOCUS_MODE_2 = 2;
}

message VideoFocusRequestNotification
{
    enum VideoFocusReason
    {
        VIDEO_FOCUS_REASON_1 = 1;
        VIDEO_FOCUS_REASON_2 = 2;
    }

    optional int32 disp_channel_id = 1;
    required VideoFocusMode mode = 2; //Enum?
    optional VideoFocusReason reason = 3; //Enum?
}

message VideoFocusNotification
{
    required VideoFocusMode mode = 1;
    optional bool unsolicited = 2;
}

message SensorRequest
{
    optional SensorType type = 1;
    optional int64 min_update_period = 2;
}

message SensorResponse
{
    required MessageStatus status = 1;
}

enum NavFocusType
{
    NAV_FOCUS_1 = 1;
    NAV_FOCUS_2 = 2;
}

message NavFocusRequestNotification
{
    optional NavFocusType focus_type = 1;
}

message NavFocusNotification
{
    required NavFocusType focus_type = 1;
}

message VoiceSessionNotification
{
    enum VoiceSessionStatus
    {
        VOICE_STATUS_START = 1;
        VOICE_STATUS_STOP = 2;
    }
    required VoiceSessionStatus status = 1;
}

message AudioFocusRequestNotification
{
    enum AudioFocusRequestType
    {
        AUDIOFOCUS_GAIN = 1;
        AUDIOFOCUS_GAIN_TRANSIENT = 2;
        AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK = 3;
        AUDIOFOCUS_RELEASE = 4;
        AUDIOFOCUS_NONE = 0;
    }
    optional AudioFocusRequestType request = 1;
}

message AudioFocusNotification
{
    enum AudioFocusStateType
    {
        AUDIOFOCUS_STATE_GAIN = 1;
        AUDIOFOCUS_STATE_GAIN_TRANSIENT = 2;
        AUDIOFOCUS_STATE_LOSS = 3;
        AUDIOFOCUS_STATE_LOSS_TRANSIENT_CAN_DUCK = 4;
        AUDIOFOCUS_STATE_LOSS_TRANSIENT = 5;
        AUDIOFOCUS_STATE_GAIN_MEDIA_ONLY = 6;
        AUDIOFOCUS_STATE_GAIN_TRANSIENT_GUIDANCE_ONLY = 7;
    }
    required AudioFocusStateType focus_state = 1;
    optional bool unsolicited = 2;
}